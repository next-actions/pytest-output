<?xml version='1.0' encoding='utf-8'?>
<testsuites>
  <properties>
    <property name="polarion-create-defects" value="false" />
    <property name="polarion-custom-lookup-method-field-id" value="testCaseID" />
    <property name="polarion-dry-run" value="false" />
    <property name="polarion-include-skipped" value="true" />
    <property name="polarion-lookup-method" value="custom" />
    <property name="polarion-project-id" value="RHEL_IDM" />
    <property name="polarion-testrun-id" value="test-run-16796614405187495" />
    <property name="polarion-testrun-status-id" value="finished" />
    <property name="polarion-user-id" value="idm-jenkins" />
  </properties>
  <testsuite errors="0" failures="3" skipped="0" tests="44" time="446.31537430300887">
    <testcase file="tests/test_kcm.py" line="11" name="test_kcm__kinit_overwrite[memory] (client)" time="7.393816760999471">
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_kcm.py::test_kcm__kinit_overwrite[memory] (client)" />
      </properties>
    </testcase>
    <testcase file="tests/test_kcm.py" line="11" name="test_kcm__kinit_overwrite[secdb] (client)" time="6.98458112499975">
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_kcm.py::test_kcm__kinit_overwrite[secdb] (client)" />
      </properties>
    </testcase>
    <testcase file="tests/test_kcm.py" line="58" name="test_kcm__kinit_collection[memory] (client)" time="14.784279809000509">
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_kcm.py::test_kcm__kinit_collection[memory] (client)" />
      </properties>
    </testcase>
    <testcase file="tests/test_kcm.py" line="58" name="test_kcm__kinit_collection[secdb] (client)" time="15.258559496000089">
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_kcm.py::test_kcm__kinit_collection[secdb] (client)" />
      </properties>
    </testcase>
    <testcase file="tests/test_kcm.py" line="148" name="test_kcm__kswitch[memory] (client)" time="9.835042532000443">
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_kcm.py::test_kcm__kswitch[memory] (client)" />
      </properties>
    </testcase>
    <testcase file="tests/test_kcm.py" line="148" name="test_kcm__kswitch[secdb] (client)" time="10.38982906199999">
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_kcm.py::test_kcm__kswitch[secdb] (client)" />
      </properties>
    </testcase>
    <testcase file="tests/test_kcm.py" line="217" name="test_kcm__subsidiaries[memory] (client)" time="8.02782066400141">
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_kcm.py::test_kcm__subsidiaries[memory] (client)" />
      </properties>
    </testcase>
    <testcase file="tests/test_kcm.py" line="217" name="test_kcm__subsidiaries[secdb] (client)" time="8.19509539899991">
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_kcm.py::test_kcm__subsidiaries[secdb] (client)" />
      </properties>
    </testcase>
    <testcase file="tests/test_kcm.py" line="293" name="test_kcm__kdestroy_nocache[memory] (client)" time="4.85983337899961">
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_kcm.py::test_kcm__kdestroy_nocache[memory] (client)" />
      </properties>
    </testcase>
    <testcase file="tests/test_kcm.py" line="293" name="test_kcm__kdestroy_nocache[secdb] (client)" time="4.789240209000127">
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_kcm.py::test_kcm__kdestroy_nocache[secdb] (client)" />
      </properties>
    </testcase>
    <testcase file="tests/test_kcm.py" line="328" name="test_kcm__tgt_renewal (client)" time="7.1836815220012795">
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_kcm.py::test_kcm__tgt_renewal (client)" />
      </properties>
    </testcase>
    <testcase file="tests/test_sudo.py" line="16" name="test_sudo__user_allowed (ipa)" time="15.126682792999418">
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_sudo.py::test_sudo__user_allowed (ipa)" />
      </properties>
    </testcase>
    <testcase file="tests/test_sudo.py" line="16" name="test_sudo__user_allowed (ldap)" time="4.90698978600085">
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_sudo.py::test_sudo__user_allowed (ldap)" />
      </properties>
    </testcase>
    <testcase file="tests/test_sudo.py" line="16" name="test_sudo__user_allowed (samba)" time="6.240917270000864">
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_sudo.py::test_sudo__user_allowed (samba)" />
      </properties>
    </testcase>
    <testcase file="tests/test_sudo.py" line="53" name="test_sudo__duplicate_sudo_user (samba)" time="10.08958691999942">
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_sudo.py::test_sudo__duplicate_sudo_user (samba)" />
      </properties>
    </testcase>
    <testcase file="tests/test_sudo.py" line="53" name="test_sudo__duplicate_sudo_user (ldap)" time="6.3383449419998215">
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_sudo.py::test_sudo__duplicate_sudo_user (ldap)" />
      </properties>
    </testcase>
    <testcase file="tests/test_sudo.py" line="99" name="test_sudo__case_sensitive_false (ipa)" time="26.608945812000456">
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_sudo.py::test_sudo__case_sensitive_false (ipa)" />
      </properties>
    </testcase>
    <testcase file="tests/test_sudo.py" line="99" name="test_sudo__case_sensitive_false (ldap)" time="6.233654558000126">
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_sudo.py::test_sudo__case_sensitive_false (ldap)" />
      </properties>
    </testcase>
    <testcase file="tests/test_sudo.py" line="99" name="test_sudo__case_sensitive_false (samba)" time="7.657207911001024">
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_sudo.py::test_sudo__case_sensitive_false (samba)" />
      </properties>
    </testcase>
    <testcase file="tests/test_sudo.py" line="146" name="test_sudo__rules_refresh (ipa)" time="30.435391995000828">
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_sudo.py::test_sudo__rules_refresh (ipa)" />
      </properties>
    </testcase>
    <testcase file="tests/test_sudo.py" line="146" name="test_sudo__rules_refresh (ldap)" time="7.436787585000275">
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_sudo.py::test_sudo__rules_refresh (ldap)" />
      </properties>
    </testcase>
    <testcase file="tests/test_sudo.py" line="146" name="test_sudo__rules_refresh (samba)" time="7.620319302001008">
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_sudo.py::test_sudo__rules_refresh (samba)" />
      </properties>
    </testcase>
    <testcase file="tests/test_sudo.py" line="182" name="test_sudo__sudo_user_is_group (ipa)" time="13.742028885000764">
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_sudo.py::test_sudo__sudo_user_is_group (ipa)" />
      </properties>
    </testcase>
    <testcase file="tests/test_sudo.py" line="182" name="test_sudo__sudo_user_is_group (ldap)" time="3.681153309000365">
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_sudo.py::test_sudo__sudo_user_is_group (ldap)" />
      </properties>
    </testcase>
    <testcase file="tests/test_sudo.py" line="182" name="test_sudo__sudo_user_is_group (samba)" time="5.599273155999981">
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_sudo.py::test_sudo__sudo_user_is_group (samba)" />
      </properties>
    </testcase>
    <testcase file="tests/test_sudo.py" line="219" name="test_sudo__sudo_user_is_nonposix_group (samba)" time="5.378183722999893">
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_sudo.py::test_sudo__sudo_user_is_nonposix_group (samba)" />
      </properties>
    </testcase>
    <testcase file="tests/test_sudo.py" line="252" name="test_sudo__runasuser_shortname (ipa)" time="13.822535223000159">
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_sudo.py::test_sudo__runasuser_shortname (ipa)" />
      </properties>
    </testcase>
    <testcase file="tests/test_sudo.py" line="252" name="test_sudo__runasuser_shortname (ldap)" time="3.4145336490000773">
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_sudo.py::test_sudo__runasuser_shortname (ldap)" />
      </properties>
    </testcase>
    <testcase file="tests/test_sudo.py" line="252" name="test_sudo__runasuser_shortname (samba)" time="4.33343225399949">
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_sudo.py::test_sudo__runasuser_shortname (samba)" />
      </properties>
    </testcase>
    <testcase file="tests/test_sudo.py" line="280" name="test_sudo__runasuser_fqn (samba)" time="4.820014188000641">
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_sudo.py::test_sudo__runasuser_fqn (samba)" />
      </properties>
    </testcase>
    <testcase file="tests/test_sudo.py" line="280" name="test_sudo__runasuser_fqn (ldap)" time="3.4419707739998557">
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_sudo.py::test_sudo__runasuser_fqn (ldap)" />
      </properties>
    </testcase>
    <testcase file="tests/test_sudo.py" line="313" name="test_sudo__sudonotbefore_shorttime (ldap)" time="3.40366839699891">
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_sudo.py::test_sudo__sudonotbefore_shorttime (ldap)" />
      </properties>
    </testcase>
    <testcase file="tests/test_sudo.py" line="368" name="test_sudo__refresh_random_offset (ipa)" time="17.828849697001715">
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_sudo.py::test_sudo__refresh_random_offset (ipa)" />
      </properties>
    </testcase>
    <testcase file="tests/test_sudo.py" line="368" name="test_sudo__refresh_random_offset (ldap)" time="17.861949166999693">
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_sudo.py::test_sudo__refresh_random_offset (ldap)" />
      </properties>
    </testcase>
    <testcase file="tests/test_sudo.py" line="368" name="test_sudo__refresh_random_offset (samba)" time="17.910531732999516">
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_sudo.py::test_sudo__refresh_random_offset (samba)" />
      </properties>
    </testcase>
    <testcase file="tests/test_sudo.py" line="409" name="test_sudo__prefer_full_refresh_over_smart_refresh[2-1] (ipa)" time="12.957242198999666">
      <failure message="assert (not True or False)">client = &lt;lib.sssd.roles.client.Client object at 0x7fe86ad66490&gt;, full_interval = 2, smart_interval = 1

    @pytest.mark.slow(seconds=10)
    @pytest.mark.tier(2)
    @pytest.mark.ticket(bz=1925505, gh=5604)
    @pytest.mark.topology(KnownTopologyGroup.AnyProvider)
    @pytest.mark.parametrize(["full_interval", "smart_interval"], [(2, 1), (3, 2)])
    def test_sudo__prefer_full_refresh_over_smart_refresh(client: Client, full_interval: int, smart_interval: int):
        """
        :title: Sudo smart refresh does not occur at the same time as full refresh
        :setup:
            1. Set ldap_sudo_full_refresh_interval to @full_interval
            2. Set ldap_sudo_smart_refresh_interval to @smart_interval
            3. Set ldap_sudo_random_offset to 0
            4. Start SSSD
        :steps:
            1. Sleep for 10 seconds
            2. Grep domain log to see when the smart and full refresh happened
        :expectedresults:
            1. Time passed
            2. Smart refresh does not occur at the same time as full refresh
        :customerscenario: True
        """
    
        def is_task_start(task: str, line: str) -&gt; bool:
            return f"Task [{task}]: executing task" in line
    
        def is_task_end(task: str, line: str) -&gt; bool:
            return f"Task [{task}]: finished successfully" in line or f"Task [{task}]: failed" in line
    
        def is_smart_skipped(line: str) -&gt; bool:
            return "Skipping smart refresh because there is ongoing full refresh." in line
    
        client.sssd.domain.update(
            ldap_sudo_full_refresh_interval=str(full_interval),
            ldap_sudo_smart_refresh_interval=str(smart_interval),
            ldap_sudo_random_offset="0",
        )
        client.sssd.start()
        time.sleep(10)
        log = client.fs.read(client.sssd.logs.domain())
    
        expect_skip = False
        inside_full = False
        is_skipped = False
    
        # Check that
        # - Either there is no smart refresh executed inside a full refresh
        # - Or the smart refresh was skipped
        for line in log.splitlines():
            if is_task_start("SUDO Full Refresh", line):
                inside_full = True
    
            if is_task_end("SUDO Full Refresh", line):
                inside_full = False
    
            if is_task_start("SUDO Smart Refresh", line):
                is_skipped = False
                if inside_full:
                    expect_skip = True
    
            if is_task_end("SUDO Smart Refresh", line):
&gt;               assert not expect_skip or is_skipped
E               assert (not True or False)

tests/test_sudo.py:470: AssertionError</failure>
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_sudo.py::test_sudo__prefer_full_refresh_over_smart_refresh[2-1] (ipa)" />
      </properties>
    </testcase>
    <testcase file="tests/test_sudo.py" line="409" name="test_sudo__prefer_full_refresh_over_smart_refresh[2-1] (ldap)" time="13.040593280000394">
      <failure message="assert (not True or False)">client = &lt;lib.sssd.roles.client.Client object at 0x7fe86ad8f2d0&gt;, full_interval = 2, smart_interval = 1

    @pytest.mark.slow(seconds=10)
    @pytest.mark.tier(2)
    @pytest.mark.ticket(bz=1925505, gh=5604)
    @pytest.mark.topology(KnownTopologyGroup.AnyProvider)
    @pytest.mark.parametrize(["full_interval", "smart_interval"], [(2, 1), (3, 2)])
    def test_sudo__prefer_full_refresh_over_smart_refresh(client: Client, full_interval: int, smart_interval: int):
        """
        :title: Sudo smart refresh does not occur at the same time as full refresh
        :setup:
            1. Set ldap_sudo_full_refresh_interval to @full_interval
            2. Set ldap_sudo_smart_refresh_interval to @smart_interval
            3. Set ldap_sudo_random_offset to 0
            4. Start SSSD
        :steps:
            1. Sleep for 10 seconds
            2. Grep domain log to see when the smart and full refresh happened
        :expectedresults:
            1. Time passed
            2. Smart refresh does not occur at the same time as full refresh
        :customerscenario: True
        """
    
        def is_task_start(task: str, line: str) -&gt; bool:
            return f"Task [{task}]: executing task" in line
    
        def is_task_end(task: str, line: str) -&gt; bool:
            return f"Task [{task}]: finished successfully" in line or f"Task [{task}]: failed" in line
    
        def is_smart_skipped(line: str) -&gt; bool:
            return "Skipping smart refresh because there is ongoing full refresh." in line
    
        client.sssd.domain.update(
            ldap_sudo_full_refresh_interval=str(full_interval),
            ldap_sudo_smart_refresh_interval=str(smart_interval),
            ldap_sudo_random_offset="0",
        )
        client.sssd.start()
        time.sleep(10)
        log = client.fs.read(client.sssd.logs.domain())
    
        expect_skip = False
        inside_full = False
        is_skipped = False
    
        # Check that
        # - Either there is no smart refresh executed inside a full refresh
        # - Or the smart refresh was skipped
        for line in log.splitlines():
            if is_task_start("SUDO Full Refresh", line):
                inside_full = True
    
            if is_task_end("SUDO Full Refresh", line):
                inside_full = False
    
            if is_task_start("SUDO Smart Refresh", line):
                is_skipped = False
                if inside_full:
                    expect_skip = True
    
            if is_task_end("SUDO Smart Refresh", line):
&gt;               assert not expect_skip or is_skipped
E               assert (not True or False)

tests/test_sudo.py:470: AssertionError</failure>
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_sudo.py::test_sudo__prefer_full_refresh_over_smart_refresh[2-1] (ldap)" />
      </properties>
    </testcase>
    <testcase file="tests/test_sudo.py" line="409" name="test_sudo__prefer_full_refresh_over_smart_refresh[2-1] (samba)" time="12.991357914999753">
      <failure message="assert (not True or False)">client = &lt;lib.sssd.roles.client.Client object at 0x7fe86ad168d0&gt;, full_interval = 2, smart_interval = 1

    @pytest.mark.slow(seconds=10)
    @pytest.mark.tier(2)
    @pytest.mark.ticket(bz=1925505, gh=5604)
    @pytest.mark.topology(KnownTopologyGroup.AnyProvider)
    @pytest.mark.parametrize(["full_interval", "smart_interval"], [(2, 1), (3, 2)])
    def test_sudo__prefer_full_refresh_over_smart_refresh(client: Client, full_interval: int, smart_interval: int):
        """
        :title: Sudo smart refresh does not occur at the same time as full refresh
        :setup:
            1. Set ldap_sudo_full_refresh_interval to @full_interval
            2. Set ldap_sudo_smart_refresh_interval to @smart_interval
            3. Set ldap_sudo_random_offset to 0
            4. Start SSSD
        :steps:
            1. Sleep for 10 seconds
            2. Grep domain log to see when the smart and full refresh happened
        :expectedresults:
            1. Time passed
            2. Smart refresh does not occur at the same time as full refresh
        :customerscenario: True
        """
    
        def is_task_start(task: str, line: str) -&gt; bool:
            return f"Task [{task}]: executing task" in line
    
        def is_task_end(task: str, line: str) -&gt; bool:
            return f"Task [{task}]: finished successfully" in line or f"Task [{task}]: failed" in line
    
        def is_smart_skipped(line: str) -&gt; bool:
            return "Skipping smart refresh because there is ongoing full refresh." in line
    
        client.sssd.domain.update(
            ldap_sudo_full_refresh_interval=str(full_interval),
            ldap_sudo_smart_refresh_interval=str(smart_interval),
            ldap_sudo_random_offset="0",
        )
        client.sssd.start()
        time.sleep(10)
        log = client.fs.read(client.sssd.logs.domain())
    
        expect_skip = False
        inside_full = False
        is_skipped = False
    
        # Check that
        # - Either there is no smart refresh executed inside a full refresh
        # - Or the smart refresh was skipped
        for line in log.splitlines():
            if is_task_start("SUDO Full Refresh", line):
                inside_full = True
    
            if is_task_end("SUDO Full Refresh", line):
                inside_full = False
    
            if is_task_start("SUDO Smart Refresh", line):
                is_skipped = False
                if inside_full:
                    expect_skip = True
    
            if is_task_end("SUDO Smart Refresh", line):
&gt;               assert not expect_skip or is_skipped
E               assert (not True or False)

tests/test_sudo.py:470: AssertionError</failure>
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_sudo.py::test_sudo__prefer_full_refresh_over_smart_refresh[2-1] (samba)" />
      </properties>
    </testcase>
    <testcase file="tests/test_sudo.py" line="409" name="test_sudo__prefer_full_refresh_over_smart_refresh[3-2] (ipa)" time="12.854692763001367">
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_sudo.py::test_sudo__prefer_full_refresh_over_smart_refresh[3-2] (ipa)" />
      </properties>
    </testcase>
    <testcase file="tests/test_sudo.py" line="409" name="test_sudo__prefer_full_refresh_over_smart_refresh[3-2] (ldap)" time="12.95574275099898">
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_sudo.py::test_sudo__prefer_full_refresh_over_smart_refresh[3-2] (ldap)" />
      </properties>
    </testcase>
    <testcase file="tests/test_sudo.py" line="409" name="test_sudo__prefer_full_refresh_over_smart_refresh[3-2] (samba)" time="13.259816068000873">
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_sudo.py::test_sudo__prefer_full_refresh_over_smart_refresh[3-2] (samba)" />
      </properties>
    </testcase>
    <testcase file="tests/test_sudo.py" line="477" name="test_sudo__local_users_negative_cache (ipa)" time="10.571119255999292">
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_sudo.py::test_sudo__local_users_negative_cache (ipa)" />
      </properties>
    </testcase>
    <testcase file="tests/test_sudo.py" line="477" name="test_sudo__local_users_negative_cache (ldap)" time="8.223812700000053">
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_sudo.py::test_sudo__local_users_negative_cache (ldap)" />
      </properties>
    </testcase>
    <testcase file="tests/test_sudo.py" line="477" name="test_sudo__local_users_negative_cache (samba)" time="7.826264384000751">
      <properties>
        <property name="polarion-testcase-id" value="sssd::tests/test_sudo.py::test_sudo__local_users_negative_cache (samba)" />
      </properties>
    </testcase>
  </testsuite>
</testsuites>